import requests
import logging
import uuid
import config
import datetime
import psycopg2
from psycopg2 import sql

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
DB_CONNECTION = {
    'dbname': 'your_db',      # –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    'user': 'your_user',      # –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    'password': 'your_password',
    'host': 'your_host',      # –Ω–∞–ø—Ä–∏–º–µ—Ä, localhost
}

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = psycopg2.connect(**DB_CONNECTION)
        return conn
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_user_from_db(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ vk_id –∏–ª–∏ username."""
    try:
        conn = get_db_connection()
        if conn is None:
            return None

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT * FROM users WHERE vk_id = %s OR username = %s LIMIT 1"),
            [user_id, user_id]
        )
        user = cursor.fetchone()
        cursor.close()
        conn.close()
        return user
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def get_user_by_username(username):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username."""
    try:
        conn = get_db_connection()
        if conn is None:
            return None

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT * FROM users WHERE username = %s LIMIT 1"),
            [username]
        )
        user = cursor.fetchone()
        cursor.close()
        conn.close()
        return user
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        return None

def register_user(user_id):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_data = {
            "id": str(uuid.uuid4()),
            "username": f"User_{user_id}",
            "vk_id": user_id,
            "balance": 0.0,
            "created_at": datetime.datetime.utcnow().isoformat()
        }
        
        conn = get_db_connection()
        if conn is None:
            return False

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO users (id, username, vk_id, balance, created_at) VALUES (%s, %s, %s, %s, %s)"),
            [user_data["id"], user_data["username"], user_data["vk_id"], user_data["balance"], user_data["created_at"]]
        )
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def update_user_name(user_id, new_name):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return False

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("UPDATE users SET username = %s WHERE vk_id = %s"),
            [new_name, user_id]
        )
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def record_operation(vk_id, op_type, amount, details):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É –æ–ø–µ—Ä–∞—Ü–∏–π."""
    try:
        operation_data = {
            "id": str(uuid.uuid4()),
            "operation_tip": op_type,
            "amount": amount,
            "details": f"vk_id: {vk_id} - {details}",
            "created_at": datetime.datetime.utcnow().isoformat()
        }
        
        conn = get_db_connection()
        if conn is None:
            return False

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO operations (id, operation_tip, amount, details, created_at) VALUES (%s, %s, %s, %s, %s)"),
            [operation_data["id"], operation_data["operation_tip"], operation_data["amount"], operation_data["details"], operation_data["created_at"]]
        )
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

def get_operations(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return []

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT * FROM operations WHERE details LIKE %s ORDER BY created_at DESC"),
            [f"%vk_id: {vk_id}%"]
        )
        operations = cursor.fetchall()
        cursor.close()
        conn.close()
        return operations
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return []

def transfer_balance(from_user_id, to_user_id, amount):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥—Ä—É–≥–æ–º—É."""
    try:
        from_user = get_user_from_db(from_user_id)
        to_user = get_user_from_db(to_user_id)

        if not from_user or not to_user:
            return "‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω."

        if from_user['balance'] < amount:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        new_balance_from = from_user['balance'] - amount
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("UPDATE users SET balance = %s WHERE vk_id = %s"),
            [new_balance_from, from_user_id]
        )
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        new_balance_to = to_user['balance'] + amount
        cursor.execute(
            sql.SQL("UPDATE users SET balance = %s WHERE vk_id = %s"),
            [new_balance_to, to_user_id]
        )
        conn.commit()
        cursor.close()
        conn.close()

        # –ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–π
        record_operation(from_user_id, "transfer_sent", -amount, f"–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user['username']}")
        record_operation(to_user_id, "transfer_received", amount, f"–ü–æ–ª—É—á–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {from_user['username']}")

        return f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ {amount} —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user['username']} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
def get_balance(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = get_user_from_db(user_id)
        if user:
            return f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']}."
        else:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞."

def deposit_balance(user_id, amount):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = get_user_from_db(user_id)
        if not user:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        new_balance = user['balance'] + amount
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("UPDATE users SET balance = %s WHERE vk_id = %s"),
            [new_balance, user_id]
        )
        conn.commit()
        cursor.close()
        conn.close()

        # –ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        record_operation(user_id, "deposit", amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}")
        return f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def withdraw_balance(user_id, amount):
    """–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = get_user_from_db(user_id)
        if not user:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        if user['balance'] < amount:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞."

        new_balance = user['balance'] - amount
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("UPDATE users SET balance = %s WHERE vk_id = %s"),
            [new_balance, user_id]
        )
        conn.commit()
        cursor.close()
        conn.close()

        # –ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
        record_operation(user_id, "withdrawal", -amount, f"–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ {amount}")
        return f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def get_user_history(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        operations = get_operations(user_id)
        if not operations:
            return "‚ùå –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞."

        history = "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
        for op in operations:
            history += f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {op[1]}, –°—É–º–º–∞: {op[2]}, –î–∞—Ç–∞: {op[4]}\n"
        return history
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∏–ª–∏ VK
def send_message(user_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å VK API –∏–ª–∏ Telegram Bot API
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è Telegram:
        response = requests.post(
            f"https://api.telegram.org/bot{config.TELEGRAM_BOT_TOKEN}/sendMessage",
            data={"chat_id": user_id, "text": message}
        )
        return response.status_code == 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

def record_operation(user_id, operation_type, amount, details):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO operations (user_id, operation_type, amount, details, created_at) VALUES (%s, %s, %s, %s, now())"),
            [user_id, operation_type, amount, details]
        )
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def get_operations(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return None

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT * FROM operations WHERE user_id = %s ORDER BY created_at DESC"),
            [user_id]
        )
        operations = cursor.fetchall()
        cursor.close()
        conn.close()
        return operations
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def add_user(vk_id, username=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO users (vk_id, username, balance, created_at) VALUES (%s, %s, %s, now())"),
            [vk_id, username, 0]
        )
        conn.commit()
        cursor.close()
        conn.close()
        return "‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

def update_username(vk_id, new_username):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("UPDATE users SET username = %s WHERE vk_id = %s"),
            [new_username, vk_id]
        )
        conn.commit()
        cursor.close()
        conn.close()
        return f"‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return None

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT * FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        user = cursor.fetchone()
        cursor.close()
        conn.close()
        return user
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return None

def update_balance(vk_id, amount, operation_type):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        cursor.execute(
            sql.SQL("SELECT balance FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        current_balance = cursor.fetchone()
        if current_balance is None:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        new_balance = current_balance[0] + amount
        if new_balance < 0:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ."

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute(
            sql.SQL("UPDATE users SET balance = %s WHERE vk_id = %s"),
            [new_balance, vk_id]
        )
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É –æ–ø–µ—Ä–∞—Ü–∏–π
        record_operation(vk_id, operation_type, amount, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}")
        conn.commit()
        cursor.close()
        conn.close()

        return f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞."

def get_balance(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT balance FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        balance = cursor.fetchone()
        cursor.close()
        conn.close()
        if balance is None:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        return f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance[0]}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞."
def get_user_from_db(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ vk_id."""
    try:
        conn = get_db_connection()
        if conn is None:
            return None

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT * FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        user = cursor.fetchone()
        cursor.close()
        conn.close()
        return user
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return None

def register_user(user_id):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "vk_id": user_id,
            "username": f"User_{user_id}",
            "balance": 0.0,
            "created_at": datetime.datetime.utcnow().isoformat()
        }
        
        cursor.execute(
            sql.SQL("INSERT INTO users (vk_id, username, balance, created_at) VALUES (%s, %s, %s, %s)"),
            [user_data['vk_id'], user_data['username'], user_data['balance'], user_data['created_at']]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."

def update_user_name(vk_id, new_name):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
        if len(new_name) < 3 or len(new_name) > 20:
            return "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤."

        cursor.execute(
            sql.SQL("UPDATE users SET username = %s WHERE vk_id = %s"),
            [new_name, vk_id]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏."

def record_operation(vk_id, op_type, amount, details):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É –æ–ø–µ—Ä–∞—Ü–∏–π."""
    try:
        conn = get_db_connection()
        if conn is None:
            return False

        cursor = conn.cursor()
        operation_data = {
            "vk_id": vk_id,
            "operation_tip": op_type,
            "amount": amount,
            "details": details,
            "created_at": datetime.datetime.utcnow().isoformat()
        }

        cursor.execute(
            sql.SQL("INSERT INTO operations (vk_id, operation_tip, amount, details, created_at) VALUES (%s, %s, %s, %s, %s)"),
            [operation_data['vk_id'], operation_data['operation_tip'], operation_data['amount'], operation_data['details'], operation_data['created_at']]
        )
        conn.commit()
        cursor.close()
        conn.close()
        
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ {details}: {e}")
        return False

def get_operations(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return []

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT * FROM operations WHERE vk_id = %s ORDER BY created_at DESC"),
            [vk_id]
        )
        operations = cursor.fetchall()
        cursor.close()
        conn.close()
        return operations
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return []
def get_user_balance(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return None

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT balance FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        balance = cursor.fetchone()
        cursor.close()
        conn.close()
        if balance:
            return balance[0]
        return 0.0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return 0.0

def update_user_balance(vk_id, new_balance):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("UPDATE users SET balance = %s WHERE vk_id = %s"),
            [new_balance, vk_id]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_balance}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞."

def transfer_balance(from_vk_id, to_vk_id, amount):
    """–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    try:
        from_balance = get_user_balance(from_vk_id)
        to_balance = get_user_balance(to_vk_id)

        if from_balance is None or to_balance is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        if from_balance < amount:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        new_from_balance = from_balance - amount
        new_to_balance = to_balance + amount

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        update_user_balance(from_vk_id, new_from_balance)
        update_user_balance(to_vk_id, new_to_balance)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
        record_operation(from_vk_id, "–ø–µ—Ä–µ–≤–æ–¥", -amount, f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {to_vk_id}")
        record_operation(to_vk_id, "–ø–µ—Ä–µ–≤–æ–¥", amount, f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç {from_vk_id}")

        return f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç {from_vk_id} –∫ {to_vk_id}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å {from_vk_id} –Ω–∞ {to_vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞."

def get_user_info(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    try:
        user = get_user_from_db(vk_id)
        if not user:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        username = user[1]  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–º—è –≤ 2-–π –∫–æ–ª–æ–Ω–∫–µ
        balance = user[2]  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –≤ 3-–π –∫–æ–ª–æ–Ω–∫–µ
        created_at = user[4]  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ 5-–π –∫–æ–ª–æ–Ω–∫–µ

        return f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {username}:\n" \
               f"–ë–∞–ª–∞–Ω—Å: {balance}üí∞\n" \
               f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."

def delete_user(vk_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("DELETE FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {vk_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    vk_id_example = "12345"

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(register_user(vk_id_example))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print(get_user_info(vk_id_example))

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(update_user_name(vk_id_example, "NewUsername"))

    # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    print(transfer_balance("12345", "67890", 50))

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(delete_user(vk_id_example))
def record_operation(vk_id, operation_type, amount, details):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO operations (vk_id, operation_type, amount, details, created_at) "
                    "VALUES (%s, %s, %s, %s, now())"),
            [vk_id, operation_type, amount, details]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏."

def get_user_operations(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT operation_type, amount, details, created_at FROM operations WHERE vk_id = %s ORDER BY created_at DESC"),
            [vk_id]
        )
        operations = cursor.fetchall()
        cursor.close()
        conn.close()

        if not operations:
            return "‚ùå –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

        operations_list = "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
        for operation in operations:
            operation_type = operation[0]
            amount = operation[1]
            details = operation[2]
            created_at = operation[3]
            operations_list += f"{operation_type} - {amount} (–î–µ—Ç–∞–ª–∏: {details}) - {created_at}\n"

        return operations_list
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π."

def add_funds(vk_id, amount):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        current_balance = get_user_balance(vk_id)

        if current_balance is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞."

        new_balance = current_balance + amount
        update_user_balance(vk_id, new_balance)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        record_operation(vk_id, "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}.")

        return f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞."

def withdraw_funds(vk_id, amount):
    """–°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        current_balance = get_user_balance(vk_id)

        if current_balance is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞."

        if current_balance < amount:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è."

        new_balance = current_balance - amount
        update_user_balance(vk_id, new_balance)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å–Ω—è—Ç–∏—è
        record_operation(vk_id, "—Å–Ω—è—Ç–∏–µ", -amount, f"–°–Ω—è—Ç–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}.")

        return f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤."

def get_system_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute("SELECT count(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("SELECT sum(balance) FROM users")
        total_balance = cursor.fetchone()[0]

        cursor.close()
        conn.close()

        return f"üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" \
               f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n" \
               f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance if total_balance else 0}üí∞"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    vk_id_example = "12345"

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(register_user(vk_id_example))

    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    print(add_funds(vk_id_example, 100))

    # –°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    print(withdraw_funds(vk_id_example, 50))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print(get_user_info(vk_id_example))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(get_user_operations(vk_id_example))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(get_system_info())
# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π

def update_user_balance(vk_id, new_balance):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("UPDATE users SET balance = %s WHERE vk_id = %s"),
            [new_balance, vk_id]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_balance}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞."

def get_user_balance(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return None  # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT balance FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        balance = cursor.fetchone()

        cursor.close()
        conn.close()

        if balance is None:
            return None  # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

        return balance[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –±–∞–ª–∞–Ω—Å
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return None

def register_user(vk_id):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO users (vk_id, balance) VALUES (%s, %s) ON CONFLICT (vk_id) DO NOTHING"),
            [vk_id, 0]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

def get_user_info(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT vk_id, balance FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        user = cursor.fetchone()

        cursor.close()
        conn.close()

        if user is None:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        return f"üßë‚Äçüíº –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\nVK ID: {user[0]}\n–ë–∞–ª–∞–Ω—Å: {user[1]}üí∞"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."

def record_system_event(event_type, message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—É–¥–∏—Ç–∞."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO system_events (event_type, message, created_at) VALUES (%s, %s, now())"),
            [event_type, message]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return "‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."

def get_system_events():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute("SELECT event_type, message, created_at FROM system_events ORDER BY created_at DESC")
        events = cursor.fetchall()

        cursor.close()
        conn.close()

        if not events:
            return "‚ùå –ù–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."

        events_list = "üìú –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n"
        for event in events:
            event_type = event[0]
            message = event[1]
            created_at = event[2]
            events_list += f"{event_type} - {message} - {created_at}\n"

        return events_list
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    vk_id_example = "12345"

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(register_user(vk_id_example))

    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    print(add_funds(vk_id_example, 100))

    # –°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    print(withdraw_funds(vk_id_example, 50))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print(get_user_info(vk_id_example))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(get_user_operations(vk_id_example))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(get_system_info())

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    print(get_system_events())

    # –ó–∞–ø–∏—Å—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    print(record_system_event("INFO", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"))
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

def add_funds(vk_id, amount):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤
        current_balance = get_user_balance(vk_id)
        if current_balance is None:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        new_balance = current_balance + amount
        update_balance_result = update_user_balance(vk_id, new_balance)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        record_user_operation(vk_id, 'deposit', amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} —Ä—É–±–ª–µ–π")

        return f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ {amount} —Ä—É–±–ª–µ–π. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç."

def withdraw_funds(vk_id, amount):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        current_balance = get_user_balance(vk_id)
        if current_balance is None:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        if current_balance < amount:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –¥–ª—è —Å–Ω—è—Ç–∏—è."

        new_balance = current_balance - amount
        update_balance_result = update_user_balance(vk_id, new_balance)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å–Ω—è—Ç–∏—è
        record_user_operation(vk_id, 'withdraw', amount, f"–°–Ω—è—Ç–∏–µ {amount} —Ä—É–±–ª–µ–π")

        return f"‚úÖ –°–Ω—è—Ç–∏–µ {amount} —Ä—É–±–ª–µ–π. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤."

def record_user_operation(vk_id, operation_type, amount, details):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/—Å–Ω—è—Ç–∏–µ) –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO operations (vk_id, operation_type, amount, details) VALUES (%s, %s, %s, %s)"),
            [vk_id, operation_type, amount, details]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏."

def get_user_operations(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ VK ID."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT operation_type, amount, details, created_at FROM operations WHERE vk_id = %s ORDER BY created_at DESC"),
            [vk_id]
        )
        operations = cursor.fetchall()

        cursor.close()
        conn.close()

        if not operations:
            return "‚ùå –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

        operations_list = "üìù –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        for op in operations:
            op_type = op[0]
            op_amount = op[1]
            op_details = op[2]
            op_created_at = op[3]
            operations_list += f"{op_type} - {op_amount} - {op_details} - {op_created_at}\n"

        return operations_list
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π."

def record_error_message(vk_id, error_message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO system_errors (vk_id, error_message, created_at) VALUES (%s, %s, now())"),
            [vk_id, error_message]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ."

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –æ—à–∏–±–æ–∫
    print(record_error_message("12345", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"))
    print(record_user_operation("12345", "deposit", 200, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞"))
    print(get_user_operations("12345"))
    
    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    print(add_funds("12345", 150))

    # –°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    print(withdraw_funds("12345", 50))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print(get_user_info("12345"))
    
    # –ó–∞–ø–∏—Å—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    print(record_system_event("WARNING", "–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 12345"))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    print(get_system_events())
# –î–∞–ª—å—à–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç—è–º–∏ —Å–∏—Å—Ç–µ–º—ã.

def get_system_events(event_type=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –≤—Å–µ)."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()

        # –ï—Å–ª–∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
        if event_type:
            cursor.execute(
                sql.SQL("SELECT event_type, message, created_at FROM system_events WHERE event_type = %s ORDER BY created_at DESC"),
                [event_type]
            )
        else:
            cursor.execute(
                sql.SQL("SELECT event_type, message, created_at FROM system_events ORDER BY created_at DESC")
            )
        
        events = cursor.fetchall()

        cursor.close()
        conn.close()

        if not events:
            return "‚ùå –ù–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."

        events_list = "üóÇ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n"
        for event in events:
            event_type = event[0]
            event_message = event[1]
            event_created_at = event[2]
            events_list += f"{event_type} - {event_message} - {event_created_at}\n"

        return events_list
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."

def record_system_event(event_type, message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO system_events (event_type, message, created_at) VALUES (%s, %s, now())"),
            [event_type, message]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return "‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."

def get_user_info(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤–∫–ª—é—á–∞—è –±–∞–ª–∞–Ω—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT vk_id, balance, created_at FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        user_info = cursor.fetchone()

        cursor.close()
        conn.close()

        if not user_info:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        vk_id = user_info[0]
        balance = user_info[1]
        created_at = user_info[2]

        user_info_str = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        user_info_str += f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {vk_id}\n"
        user_info_str += f"–ë–∞–ª–∞–Ω—Å: {balance}\n"
        user_info_str += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}\n"

        return user_info_str
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."

def update_user_balance(vk_id, new_balance):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("UPDATE users SET balance = %s WHERE vk_id = %s"),
            [new_balance, vk_id]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return "‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞."

def get_user_balance(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return None  # –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT balance FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        result = cursor.fetchone()
        cursor.close()
        conn.close()

        if result:
            return result[0]
        else:
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print(get_user_info("12345"))
    print(add_funds("12345", 500))  # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    print(withdraw_funds("12345", 100))  # –°–Ω—è—Ç–∏–µ

    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    print(record_system_event("INFO", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å"))
    print(get_system_events())  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
# –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç—è–º–∏ —Å–∏—Å—Ç–µ–º—ã.

def log_user_activity(vk_id, action_type, details):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∂—É—Ä–Ω–∞–ª."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("INSERT INTO user_activity (vk_id, action_type, details, created_at) VALUES (%s, %s, %s, now())"),
            [vk_id, action_type, details]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

def get_user_activity(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–µ–π—Å—Ç–≤–∏—è) –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT action_type, details, created_at FROM user_activity WHERE vk_id = %s ORDER BY created_at DESC"),
            [vk_id]
        )
        activities = cursor.fetchall()

        cursor.close()
        conn.close()

        if not activities:
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

        activity_list = "üóÇ –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        for activity in activities:
            action_type = activity[0]
            details = activity[1]
            created_at = activity[2]
            activity_list += f"{action_type} - {details} - {created_at}\n"

        return activity_list
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

def delete_user_account(vk_id):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å—é –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("DELETE FROM users WHERE vk_id = %s"),
            [vk_id]
        )
        conn.commit()
        cursor.close()
        conn.close()

        return "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

def get_all_users():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT vk_id, balance, created_at FROM users ORDER BY created_at DESC")
        )
        users = cursor.fetchall()

        cursor.close()
        conn.close()

        if not users:
            return "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ."

        users_list = "üóÇ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for user in users:
            vk_id = user[0]
            balance = user[1]
            created_at = user[2]
            users_list += f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {vk_id} - –ë–∞–ª–∞–Ω—Å: {balance} - –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}\n"

        return users_list
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

def get_transaction_history(vk_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        conn = get_db_connection()
        if conn is None:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        cursor = conn.cursor()
        cursor.execute(
            sql.SQL("SELECT transaction_type, amount, created_at FROM transactions WHERE vk_id = %s ORDER BY created_at DESC"),
            [vk_id]
        )
        transactions = cursor.fetchall()

        cursor.close()
        conn.close()

        if not transactions:
            return "‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

        transactions_list = "üóÇ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n"
        for transaction in transactions:
            transaction_type = transaction[0]
            amount = transaction[1]
            created_at = transaction[2]
            transactions_list += f"{transaction_type} - –°—É–º–º–∞: {amount} - –î–∞—Ç–∞: {created_at}\n"

        return transactions_list
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    print(get_all_users())

    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(log_user_activity("12345", "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ 500"))

    # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(get_user_activity("12345"))

    # –ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(delete_user_account("12345"))

    # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(get_transaction_history("12345"))
